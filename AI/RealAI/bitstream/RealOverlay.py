from pynq import Overlay, allocate
from pynq import PL 
import numpy as np
import pandas as pd
import time
from sklearn.preprocessing import StandardScaler
import pickle
from ast import literal_eval

PL.reset()

scaler_time = time.time()

# Load and preprocess the dataset
file_path = '/home/xilinx/IP/combined_2.csv'
df = pd.read_csv(file_path, converters={'ax': literal_eval, 'ay': literal_eval, 'az': literal_eval,
                                        'gx': literal_eval, 'gy': literal_eval, 'gz': literal_eval})

# Combine ax, ay, az, gx, gy, gz columns into a single feature list
X_combined = [ax + ay + az + gx + gy + gz for ax, ay, az, gx, gy, gz in zip(df['ax'], df['ay'], df['az'], 
                                                                             df['gx'], df['gy'], df['gz'])]

# Pad sequences to the max length
max_length = max(len(sequence) for sequence in X_combined)
X_padded = np.array([np.pad(sequence, (0, max_length - len(sequence)), 'constant') for sequence in X_combined])

# Reshape to fit input requirements of the model
X_padded = X_padded.reshape((X_padded.shape[0], -1))

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_padded)
print(f"Scaler time: {((time.time() - scaler_time) * 1000):.4f} ms\n")

# Load the overlay
overlay = Overlay("/home/xilinx/IP/design_3.bit")

# DMA objects
dma = overlay.axi_dma_0
dma_send = dma.sendchannel
dma_recv = dma.recvchannel

# HLS object
hls = overlay.predict_0
CONTROL_REGISTER = 0x0
hls.write(CONTROL_REGISTER, 0x81)  # Starts the HLS IP


# List of hard-coded input data for testing
input_data_list = [
    #reload
    {
        'ax': [-1860, -2765, -1338, -871, -705, -673, -850, -1187, -891, -708, -550, -411, -290, -17, 114, 127, 281, 286, 341, 271, 309, 268, 270, 194, 369, -534, -1257, -525, -62, -59, 72, 177, 182, 239, 423, 423, 652, 407, 486, 80, 243, -21, -4, -94, -344, -330, -372, -515, -604, -702, -617, -532, -510, -462, -443, -465, -465, -442, -433, -442],
        'ay': [-52, 1050, 835, 507, -86, 262, 530, 473, 502, 418, 274, 332, 127, 122, 77, 41, -93, -61, -182, -234, -311, -366, -455, -690, -642, -307, 58, 425, 111, -88, -59, -110, -139, -166, -176, -259, -207, -231, -262, -63, 195, 194, 540, 676, 538, 717, 432, 341, 449, 363, 414, 350, 402, 298, 284, 224, 159, 190, 171, 136],
        'az': [-1, 1849, 1460, 896, 650, 739, 855, 926, 538, 367, 96, 104, -54, -82, -69, -31, -218, -145, -276, -288, -359, -436, -528, -811, -888, -352, 787, 711, 429, 204, 42, 39, 12, -2, -106, -99, -201, -101, 54, 214, 441, 357, 265, 351, 385, 396, 348, 277, 270, 265, 142, 142, 122, 85, 66, 61, 55, 44, 40, 38],
        'gx': [-7358, 4193, -9, 1382, 479, 4223, 3827, 1377, 811, -4082, -4695, -6839, -5528, -5906, -4016, -3608, -2563, -2639, -2172, -2523, -1688, -2053, -2430, -2861, -4395, -12293, 2162, -989, -727, 2712, 1580, 1456, 4341, 3913, 4862, 3978, 6497, 5897, 7544, 12102, 8515, 7885, 8614, 3238, 5237, 2903, -2422, 371, 314, 3721, 7802, 6466, 5900, 3794, 3384, 915, 905, 1548, -363, -834],
        'gy': [25000, 24609, 2132, -3712, -6600, -2651, -1570, -6118, -15042, -16987, -19706, -19846, -21451, -20333, -15900, -16398, -12647, -9215, -6579, -4576, -2762, -1154, 1306, 5421, 22705, 25000, 25000, -3865, -6307, -8651, -10152, -10995, -9926, -9072, -5056, -1101, 3406, 7934, 12105, 12320, 10105, 7855, 6353, 9759, 10074, 7949, 8655, 7187, 6156, 3927, -608, 403, -77, -537, -269, -434, -511, -555, -331, 212],
        'gz': [-20419, -6069, -3853, 5698, 3442, 260, 3447, 6843, 9075, 10937, 11794, 12990, 13817, 11368, 10254, 11168, 8695, 7426, 6375, 5088, 3837, 2613, 670, -2942, -14623, -24288, -11938, -86, 3811, 6074, 7010, 8722, 10013, 9139, 4843, 2683, -2848, -4669, -8731, -14948, -14051, -17395, -18793, -15255, -15299, -12373, -11854, -11315, -11246, -8770, -4937, -4155, -2489, -675, 415, 946, 888, 823, 1077, 750]
    },
    #bowling
    {
        'ax': [-1172, -1756, -2466, -2928, -2752, -2337, -2032, -1861, -1467, -1157, -812, -521, -278, -203, -152, -265, -328, -358, -558, -765, -1051, -1535, -1686, -2190, -2347, -2557, -2117, -1768, -1374, -1081, -779, -518, -290, -147, -17, 66, 98, 166, 158, 156, 86, 78, -10, -153, -372, -565, -711, -987, -1029, -903, -749, -880, -958, -931, -899, -785, -694, -644, -552, -427],
        'ay': [99, 213, 238, 145, 211, 232, 181, 20, -4, -25, 64, -20, 46, -60, 14, -90, -8, 11, -25, 142, 98, 291, 238, 134, 352, 254, 197, 77, 71, 64, 27, 12, 26, 31, 34, 13, -11, -15, 24, 58, 73, 24, 38, 136, 166, 132, 119, 196, 256, 264, 262, 63, 135, 216, 173, 169, 102, 152, 159, 123],
        'az': [421, -106, -263, -620, -721, -630, -394, -307, -354, -405, -413, -401, -377, -333, -307, -331, -350, -276, -191, -120, -29, 31, 4, -120, -255, -394, -347, -413, -466, -419, -373, -215, -51, 80, 259, 382, 487, 471, 457, 340, 200, 67, -86, -244, -396, -577, -513, -582, -666, -730, -507, -339, -339, -348, -424, -450, -406, -329, -288, -322],
        'gx': [-2945, 302, 1847, 1783, 3835, 6170, 4562, 2979, 2665, 3719, 2746, -93, -3682, -4737, -2093, -2800, -4403, -2229, 1226, -292, -36, -2553, -6030, 1124, 2570, 2293, 178, -3067, -1638, -1841, -3282, -342, -1055, -513, -2155, -1667, -727, -390, 894, 1116, 1948, 3250, 4109, 4872, -109, -1640, -2127, -1401, -606, -1834, 2491, 340, 7357, 5452, 721, -1589, -808, 1620, -168, -969],
        'gy': [-20872, -25000, -25000, -25000, -25000, -24902, -19193, -17315, -17108, -15996, -13429, -9047, -5835, -2757, -1647, -598, 481, 1814, 6009, 9878, 14800, 18884, 23760, 24383, 25000, 25000, 25000, 24207, 22986, 22032, 20261, 17912, 16552, 13673, 10228, 6964, 3121, -493, -2850, -6319, -9198, -11664, -12938, -14062, -17295, -19597, -20797, -20442, -20278, -17606, -11240, -7518, -8953, -11258, -12115, -10166, -6289, -3569, -3283, -3030],
        'gz': [-5108, -4999, -4145, -3526, -2138, 1054, 4335, 4924, 4560, 4043, 4029, 3321, 2550, 988, 136, -54, -746, 960, -1731, -1621, -2870, -3997, -1403, -2052, -1406, -279, 1892, 1321, 1654, 1306, 1374, 2121, 1197, 692, 147, -83, -70, -952, -1675, -2114, -2191, -1797, -2803, -2738, -3094, -4169, -5117, -6699, -5795, -5191, -2199, -4042, -4148, -1808, -1968, -1638, -1956, -2153, -1258, -795]
    },
    #reload
    {
        'ax': [754, 986, 1073, 239, 207, 218, 425, 423, 470, 447, 412, 376, 262, 199, 163, 82, 14, -38, -34, 68, 90, 139, 86, 108, 98, 134, 117, 116, 142, 109, 123, 124, 126, 142, 125, 138, 142, 137, 145, 128, 143, 127, 137, 133, 137, 135, 142, 126, 146, 132, 139, 133, 134, 129, 137, 129, 133, 124, 133, 128],
        'ay': [-40, -791, -1349, 148, 255, 296, -96, -30, -135, -164, 24, -81, 172, 202, 193, 501, 251, 584, 331, 770, 648, 592, 446, 441, 481, 484, 534, 506, 487, 523, 486, 458, 494, 473, 495, 457, 476, 468, 474, 486, 483, 492, 489, 470, 480, 467, 472, 470, 474, 493, 480, 479, 492, 476, 475, 472, 478, 488, 479, 476],
        'az': [231, 667, 987, 553, 344, 506, 342, 472, 417, 352, 292, 210, 247, 253, 142, 206, 77, 115, -196, -104, -79, -27, 5, 25, -28, -101, -39, -36, -59, -44, -42, -92, -47, -48, -70, -68, -48, -43, -64, -57, -64, -67, -55, -73, -64, -75, -61, -65, -67, -57, -66, -58, -59, -68, -64, -54, -62, -66, -71, -67],
        'gx': [-14503, -12722, -1664, -6754, -972, 588, -6810, -228, -2694, 1512, 1891, 4142, 9590, 6743, 12341, 6772, 7984, 3361, 6508, 6440, 67, 252, 319, 1468, 1096, 2173, -280, 507, 232, 193, -646, 343, -863, -475, 44, -48, -219, 167, 523, 370, 209, -41, -61, 70, -285, 191, 0, -15, 104, -270, -46, -21, 91, 60, 104, -238, -11, 234, 188, 39],
        'gy': [8796, 6229, 5862, 3827, 981, -2250, -4380, -2174, -4105, -3748, -4063, -2190, -642, -2270, -1789, -2393, -4303, -4354, -6113, -2049, -536, 907, 1191, 803, -713, -193, 1155, -375, 517, 280, -368, -404, 627, 136, 103, 269, 340, -206, 118, -236, -184, -140, -199, -254, -91, -198, 125, -157, -16, 2, -72, 72, -39, -61, 102, 34, -34, -130, 34, 210],
        'gz': [7417, 6208, 3021, -6139, -1860, 160, 1091, 140, -898, -2080, -2801, -4509, -5371, -3989, -5862, -4306, -5278, -3537, -6245, -5686, -2174, -869, -177, -867, -422, -316, -480, 651, -300, -65, 492, 173, -22, -119, 119, 155, -48, 122, -308, 69, -137, -61, 60, -3, -25, 92, -14, -36, -53, -117, 70, -13, 0, 49, -11, -171, -97, -42, 5, 27]
    },
    #volley
    {
        'ax': [-1122, -696, -351, -390, -226, -183, -170, -256, -240, -288, -407, -521, -643, -719, -757, -770, -806, -764, -707, -675, -547, -590, -589, -646, -740, -902, -1030, -1050, -1118, -1009, -863, -645, -403, -223, -145, -28, -1, 59, 22, -15, -122, -186, -329, -378, -483, -675, -874, -694, -962, -845, -418, -754, -629, -491, -430, -476, -503, -418, -423, -462],
        'ay': [-724, -70, 644, 205, -82, 44, -27, -38, -93, -26, 60, 112, 203, 234, 236, 280, 288, 318, 329, 308, 341, 387, 356, 556, 596, 682, 525, 565, 301, 171, 6, -101, -84, -156, -145, -147, -91, -102, -68, -25, 105, 131, 225, 156, 335, 274, 409, 436, 554, 606, 487, 392, 266, 450, 362, 282, 345, 224, 241, 194],
        'az': [527, -320, -40, -128, -157, 6, -51, -23, -32, -69, -59, -75, -126, -133, -158, -158, -199, -158, -133, -144, -130, -100, -156, -179, -194, -205, -243, -278, -215, -112, -49, 33, 15, 41, 43, 22, 21, 12, -1, -15, -27, 8, -56, -81, -25, 32, 107, 147, 175, -14, 121, 327, 141, -38, -1, 20, 37, -56, -11, 28],
        'gx': [3981, 51, -4997, -6986, -341, 1406, -519, -1460, -1461, 354, 885, 1674, 1127, 1177, 995, 1010, 84, -315, 61, -283, -888, -1386, 1374, 2153, 1453, 862, 815, 28, -1873, -1561, -1023, 38, 901, 82, -904, -66, -566, -344, -522, 781, 625, -871, -3807, -3968, -3878, -6472, -958, -6746, -2025, -5832, -4263, 1169, 8567, 10484, 4384, 3643, 2304, 1573, 1670, 1806],
        'gy': [-23020, -2222, 7129, 4709, -229, -4235, -1549, -213, -172, -508, -670, -1836, -1377, -2189, -1615, -1580, -1876, -1342, -1262, -1580, -817, -2, -48, 55, 1995, 1567, 2494, 2691, 4035, 4352, 3357, 2268, 727, 2127, 1973, 1200, 994, 250, 846, 394, 926, 205, -1546, -265, 952, 3244, -1020, -570, -1497, -4364, -412, -1136, -4868, -3780, -677, 553, -1037, -1470, 259, 646],
        'gz': [10087, 2599, 4992, 5185, 3416, 1664, -626, -2977, -4390, -6487, -6752, -7797, -8680, -8555, -8797, -8098, -7375, -6521, -4468, -3094, -1619, 44, 2204, 4641, 6476, 8108, 10153, 10978, 11908, 11896, 12038, 11556, 8947, 7259, 4628, 3025, 1775, 306, -2021, -3137, -4438, -4991, -4765, -7710, -7764, -10755, -8954, -10827, -10254, -8797, -6138, -5066, -6491, -6750, -4531, -3725, -1252, 322, 266, 1366]
    },
    #rainbomb
    {
        'ax': [-929, -1638, -2548, -2821, -2557, -1871, -1110, -592, -295, -175, -44, 29, 53, 131, 97, 97, 69, 55, -8, -46, -120, -209, -260, -253, -591, -2105, -1976, -1026, -382, -24, 141, 188, 121, 119, 58, 51, 10, 136, -27, 131, 68, 41, 69, 99, -58, -47, -242, -324, -569, -524, -589, -645, -575, -470, -401, -430, -430, -421, -415, -414],
        'ay': [823, 491, 650, 505, 590, 296, 276, 310, 285, 182, 85, 9, -35, -34, -5, 6, 78, 110, 121, 143, 196, 234, 208, 88, -257, -215, 662, 207, 719, -73, 25, -51, 16, 6, 46, -59, -6, -24, -100, 224, 161, 29, 14, 36, -22, 354, 258, 562, 403, 726, 633, 573, 596, 557, 447, 333, 328, 263, 226, 215],
        'az': [1454, 2128, 1917, 953, -125, -682, -848, -844, -779, -720, -729, -689, -653, -685, -675, -724, -776, -822, -865, -882, -941, -1090, -1493, -1747, -1343, -86, 1137, 1373, 878, 844, 490, 647, 581, 561, 558, 554, 483, 585, 404, 86, 54, 24, 85, 104, 207, 381, 320, 541, 505, 311, 372, 309, 250, 231, 211, 220, 213, 191, 177, 179],
        'gx': [-4623, 4074, 6043, 1550, -6786, -12378, -10460, -7573, -6408, -6658, -5638, -4834, -3273, -2488, -1427, 14, 1993, 3587, 5249, 7304, 9079, 9799, 11632, 8153, 1738, 2162, -6097, -3562, -228, -2843, 232, -749, -2378, 810, -1725, 21, -847, 996, 3172, 3801, -1094, 543, 3739, 4805, 9311, 8703, 7889, 9195, 8893, 12090, 6831, 6756, 3357, 988, -2526, -1728, -820, -1516, -585, -921],
        'gy': [-6205, -18536, -25000, -25000, -25000, -25000, -24745, -18839, -12580, -8697, -5908, -2888, -2472, -1399, -1603, -2699, -3381, -3726, -3544, -3327, -4010, -4554, -2608, 15376, 25000, 25000, 25000, 15775, 6500, -2241, 437, 1352, 1921, 664, -601, -2085, -3231, -2835, -4625, -5735, 723, 4519, 9157, 11838, 12016, 10508, 9313, 12045, 5651, 2691, 3084, -431, -1565, -2594, -245, 1030, 733, 463, 0, -51],
        'gz': [8491, 12067, 17822, 18189, 18540, 17116, 11793, 10060, 8201, 7499, 5589, 4333, 2929, 1271, 177, -1241, -2879, -3457, -4266, -6601, -8280, -10001, -11324, -14008, -18265, -25000, -10248, -12434, -962, 4158, 1818, 1489, -478, 659, 519, 2034, 845, 2571, 1601, 450, 2654, 1634, 146, -3014, -6364, -9740, -11005, -13094, -11690, -11922, -10122, -8378, -6302, -3408, -2092, -1030, -353, 331, 648, 889]
    },
    #shield
    {
        'ax': [-650, -1415, -2534, -2410, -1815, -1251, -499, -191, 210, 224, 347, 325, 355, 275, 357, 330, 342, 363, 375, 345, 358, 331, 283, 206, 99, -9, -136, -272, -453, -610, -786, -949, -1048, -1213, -877, -784, -584, -493, -471, -456, -456, -462, -465, -488, -467, -452, -428, -467, -471, -479, -471, -461, -470, -472, -463, -468, -464, -466, -459, -460],
        'ay': [1086, 1215, 1028, 378, -54, -290, -196, -100, 208, 298, 415, 334, 303, 295, 279, 344, 376, 352, 343, 353, 323, 341, 253, 281, 157, 78, 128, 162, 122, 316, 163, 468, 436, 354, 757, 575, 344, 342, 289, 296, 285, 258, 264, 227, 162, 121, 122, 90, 69, 104, 115, 112, 106, 104, 102, 128, 133, 119, 123, 111],
        'az': [-1287, -1795, -1654, -725, -14, 799, 528, 385, 117, 192, 30, 47, 20, 181, 34, 66, 31, 78, 11, 41, 27, 87, 138, 215, 339, 320, 136, 18, -136, -301, -382, -432, -345, -390, -320, -195, -111, -11, 29, -10, -61, -93, -61, -18, 52, 94, 133, 153, 135, 109, 89, 83, 103, 94, 74, 58, 57, 59, 69, 73],
        'gx': [4588, 991, 591, -5262, -859, -3497, -3685, -1656, -1117, 724, -926, 65, 492, -785, 1058, -491, 476, 106, 1099, -1261, 105, -701, -135, -270, 305, 2122, 4216, 2411, 4496, 341, -4886, 1141, -9743, -2022, -1281, -3984, 1280, 3524, 1439, 1355, 1738, 2465, 2231, 575, -1986, -2252, -1470, -1623, -1060, -869, -626, -689, -1311, -956, -429, -263, -515, -543, -556, -368],
        'gy': [8127, 21364, 25000, 25000, 25000, 21719, 11070, 6110, 2656, 2361, 1178, 1670, 1410, 1234, -745, 292, -481, -241, -691, -334, -260, -276, -1051, -2697, -4192, -7541, -12524, -14442, -17177, -20819, -21217, -21877, -16596, -13613, -7933, -4038, -202, 1962, 1252, -1573, -2852, -1817, -161, 880, 1764, 1455, 989, 571, 43, 90, 280, 591, 971, 78, -28, 23, 58, 96, 176, 160],
        'gz': [8325, 15324, 16296, 15944, 13801, 8795, 5713, 2832, 1351, 181, 186, -12, 360, 14, 291, -136, 171, 231, 504, -17, 112, -254, -443, -1036, -2468, -3925, -4133, -5582, -6960, -7413, -10711, -13254, -12331, -16808, -12701, -4329, -2272, -1696, -2783, -3204, -1994, -1287, -199, 750, 1776, 1269, 1567, 1483, 903, 361, 257, 378, 333, 344, 184, -149, 131, 32, 106, -25]
    },
    #logout
    {
        'ax': [-623, -864, -1495, -1997, -1975, -1391, -753, -498, -310, -94, 64, 79, 94, 97, -9, -94, -220, -370, -481, -594, -497, -429, -430, -451, -503, -452, -345, -232, -116, -59, 21, 47, 71, 127, 48, 77, -39, -107, -313, -553, -774, -1016, -995, -985, -1065, -892, -769, -567, -599, -586, -419, -342, -411, -425, -449, -455, -446, -452, -462, -467],
        'ay': [1457, 2012, 1618, 1117, 534, -314, -462, -223, -217, -244, -188, -95, 4, -17, -9, 88, 131, 361, 722, 728, 1473, 1489, 1191, 988, 690, 385, 161, 6, -44, -62, 24, -26, -25, -34, -78, 16, -33, -12, 4, 307, 122, 675, 734, 593, 768, 624, 590, 656, 285, 498, 501, 157, 84, 219, 108, -59, -52, -40, 8, 71],
        'az': [476, 537, 548, 289, 31, 32, -55, -171, -186, -180, -166, -137, -200, -247, -156, -5, 100, 257, 327, 542, 613, 795, 1011, 1137, 1034, 760, 579, 436, 296, 170, 130, 116, 82, 76, 65, 32, 43, 72, 144, 226, 163, 100, -117, 67, 333, 279, 427, 460, 556, 489, 341, 316, 356, 281, 219, 187, 153, 140, 138, 144],
        'gx': [77, 4580, 6701, 4755, 2662, -787, -1433, -1530, -2795, -3187, -3294, -2726, -4506, -6344, -3236, -1966, 1925, 2687, 6037, 1682, 6866, 3591, -836, -755, -870, -402, -373, -778, -2348, -240, 313, -535, -1051, -1833, -963, -1324, -2655, -2443, -1886, -1541, -2251, -3497, -13654, -17965, -11590, -7689, -4499, -5403, -759, 5238, 1908, -747, 2690, 4033, -1199, -1168, 753, 1580, 2670, 3257],
        'gy': [126, -4293, -3147, -4390, -1288, -907, -1879, -1201, -210, 159, 1346, 2304, 2453, 4548, 7977, 10145, 10701, 11435, 10846, 12737, 9882, 10209, 7947, 5288, -174, -3370, -4991, -6355, -7212, -6788, -5816, -5343, -5166, -4531, -5131, -5245, -4406, -4437, -3730, -6810, -7588, -9846, -9269, 1834, 3765, 3019, 6961, 5070, 5766, 2401, 479, 1466, 902, -818, -984, -769, -572, -167, 523, 683],
        'gz': [-585, 11603, 19045, 24420, 25000, 22951, 14761, 8706, 7538, 5688, 3652, 2214, 2000, 2071, -93, -1700, -4149, -5027, -5955, -4190, -2500, 3576, 9366, 10699, 12522, 12752, 11231, 8699, 6198, 3008, 1786, 1253, 210, -646, -2632, -4207, -5542, -8066, -11984, -12748, -15675, -16533, -13585, -15356, -12738, -9485, -8488, -4821, -5271, -5066, -1062, 442, -1647, -940, 1983, 1873, 1162, 787, -23, 327]
    }
]

# Allocate input and output buffers
input_buffer = allocate(shape=(360,), dtype=np.float32)
output_buffer = allocate(shape=(7,), dtype=np.float32)

# Process each set of inputs
for index, hard_coded_data in enumerate(input_data_list):
    # Combine and preprocess inputs
    combined_input = hard_coded_data['ax'] + hard_coded_data['ay'] + hard_coded_data['az'] + \
                     hard_coded_data['gx'] + hard_coded_data['gy'] + hard_coded_data['gz']

    padded_input = np.pad(combined_input, (0, 360 - len(combined_input)), 'constant')

    # Reshape padded_input to be 2D for StandardScaler
    # padded_input_reshaped = padded_input.reshape(-1, 1)  # Reshape to 2D with one column

    # Fit and transform using StandardScaler
    scaled_input = scaler.transform([padded_input]) 

    # Fill the input buffer
    for i in range(360):
        input_buffer[i] = scaled_input[0][i]
    #print(input_buffer)
    # DMA transfer for inference
    start_time = time.time()
    dma_send.transfer(input_buffer)
    dma_recv.transfer(output_buffer)
    dma_send.wait()
    dma_recv.wait()
    
    # Output the result from DMA
    print(f"Float values:{output_buffer}")
    max_idx = 0
    max_val = output_buffer[0]
    for i in range(1, 7):
        if output_buffer[i] > max_val:
            max_val = output_buffer[i]  
            max_idx = i

    #print("Input Buffer (Sent Data):", input_buffer)
    print(f"Predicted Gesture: {max_idx}")
    print(f"Inference time: {((time.time() - start_time) * 1000):.4f} ms\n")

# Clean up
input_buffer.close()
output_buffer.close()
