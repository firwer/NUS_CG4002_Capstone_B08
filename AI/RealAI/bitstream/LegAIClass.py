from pynq import Overlay, allocate
from pynq import PL 
import numpy as np
import pandas as pd
import time
from sklearn.preprocessing import StandardScaler
from ast import literal_eval
from scipy.special import softmax
from logger_config import setup_logger

logger = setup_logger(__name__)

class LegAI:
    def __init__(self):
        PL.reset()
        scaler_time = time.time()

        print("Setting up")

        self.scaler = StandardScaler()

      #   # Set up scaler using .csv (very long)
      #   file_path = '/home/xilinx/IP/combined_2.csv'
      #   df = pd.read_csv(file_path, converters={'ax': literal_eval, 'ay': literal_eval, 'az': literal_eval,
      #                                           'gx': literal_eval, 'gy': literal_eval, 'gz': literal_eval})

      #   # Combine ax, ay, az, gx, gy, gz columns into a single feature list
      #   X_combined = [ax + ay + az + gx + gy + gz for ax, ay, az, gx, gy, gz in zip(df['ax'], df['ay'], df['az'], 
      #                                                                                df['gx'], df['gy'], df['gz'])]

      #   # Pad sequences to the max length
      #   max_length = max(len(sequence) for sequence in X_combined)
      #   X_padded = np.array([np.pad(sequence, (0, max_length - len(sequence)), 'constant') for sequence in X_combined])
      #   X_padded = X_padded.reshape((X_padded.shape[0], -1))
      #   # Scale features and store scaler
      #   self.scaler.fit(X_padded)

        # Set up scaler by hard coding
        self.scaler.mean_ = np.array([-1986.9127272727274, -1396.6695454545454, -990.7190909090909, -861.4804545454546, -833.4045454545454, -778.7004545454546, -733.709090909091, -697.7913636363636, -689.9254545454545, -699.4231818181818, -717.645, -743.1627272727272, -772.0481818181818, -798.1704545454545, -821.8668181818182, -840.9009090909091, -854.2704545454545, -867.4940909090909, -881.8331818181819, -897.8390909090909, -908.2122727272728, -913.8372727272728, -898.5813636363637, -875.605, -840.4795454545455, -798.9609090909091, -772.9740909090909, -752.9131818181818, -751.2681818181818, -755.7677272727273, -763.5359090909091, -782.7913636363636, -807.1695454545454, -832.4931818181818, -835.7031818181819, -824.0795454545455, -799.4304545454545, -791.0881818181819, -784.7395454545455, -777.1963636363637, -772.5668181818182, -766.03, -760.6195454545455, -759.0781818181819, -756.2190909090909, -754.6377272727273, -752.4395454545455, -750.3722727272727, -751.5004545454545, -750.6009090909091, 58.63136363636364, 10.314545454545454, -172.72954545454544, -101.03954545454546, -82.80318181818181, -40.75954545454545, -52.750454545454545, -66.17318181818182, -57.01681818181818, -58.67090909090909, -62.13545454545454, -54.532272727272726, -44.63318181818182, -40.24636363636364, -33.650454545454544, -24.761363636363637, -22.014545454545456, -16.038636363636364, -7.742727272727273, 5.735, 8.808181818181819, 11.856363636363636, 18.37818181818182, 17.12181818181818, 13.851818181818182, 15.682272727272727, 11.833636363636364, 7.445, 2.557272727272727, -8.133636363636363, -18.12818181818182, -24.39181818181818, -28.712272727272726, -38.25090909090909, -38.50636363636364, -51.21636363636364, -41.699090909090906, -45.17818181818182, -41.737272727272725, -44.37136363636364, -32.027272727272724, -24.60272727272727, -25.41409090909091, -18.384545454545453, -18.07318181818182, -17.546818181818182, -14.906818181818181, -15.590454545454545, -15.270909090909091, -14.322272727272727, -537.8, -550.0118181818182, -680.8754545454545, -481.98454545454547, -281.59818181818184, -177.65227272727273, -134.45272727272726, -116.99363636363637, -116.24636363636364, -123.13636363636364, -123.45590909090909, -119.32818181818182, -106.93818181818182, -90.46227272727273, -77.33818181818182, -60.57181818181818, -42.487272727272725, -33.63545454545454, -18.245, -2.9413636363636364, 9.795909090909092, 13.649545454545455, -8.699545454545454, -22.19818181818182, -19.42772727272727, -14.465454545454545, -9.387727272727274, -3.7790909090909093, -15.61, -39.927727272727275, -60.70681818181818, -84.04818181818182, -111.89727272727272, -143.42954545454546, -185.61409090909092, -212.60227272727272, -211.67045454545453, -178.095, -141.45136363636362, -121.66181818181818, -103.05727272727273, -86.27363636363637, -83.905, -77.79636363636364, -69.99818181818182, -73.71136363636364, -74.35409090909091, -74.85090909090908, -73.18454545454546, -74.85545454545455, -3304.4481818181816, -3945.759090909091, -1500.8195454545455, -379.4818181818182, 613.2672727272727, 1137.2140909090908, 407.0031818181818, 329.745, 392.7959090909091, 226.6240909090909, 333.8390909090909, 658.6836363636363, 808.1422727272727, 862.2822727272727, 958.2918181818181, 1078.4413636363636, 1118.9072727272728, 1201.8159090909091, 1336.6963636363637, 1567.425, 1770.2340909090908, 1962.3163636363636, 1758.1431818181818, 1410.1863636363637, 1198.0931818181818, 1110.0704545454546, 918.5918181818182, 607.2781818181818, 270.7427272727273, -31.837272727272726, -191.92090909090908, -226.39136363636365, -281.1036363636364, -415.8331818181818, -551.9954545454545, -577.5995454545455, -518.2445454545455, -633.2031818181819, -457.82863636363635, -398.505, -190.64227272727274, -135.73, -79.46227272727273, 65.9240909090909, 86.70272727272727, 172.82, 218.44, 206.69772727272726, 220.12863636363636, 245.06727272727272, -9048.065, -5797.975454545454, -1966.2668181818183, 1282.1795454545454, 2602.8095454545455, 2992.5286363636365, 2999.8886363636366, 2815.9286363636365, 2690.3081818181818, 2741.9145454545455, 2903.088181818182, 3181.768181818182, 3522.847272727273, 3810.485, 4004.253181818182, 4099.074545454546, 4098.901818181818, 4036.453636363636, 3846.9531818181817, 3633.5118181818184, 3384.672727272727, 3072.8095454545455, 2719.7404545454547, 2217.088181818182, 1524.2786363636365, 677.2918181818181, -211.46818181818182, -1107.8504545454546, -1945.2759090909092, -2638.3036363636365, -3156.913181818182, -3513.3354545454545, -3667.425, -3596.6272727272726, -3187.2586363636365, -2518.11, -1643.3195454545455, -831.2122727272728, -199.5590909090909, 231.37363636363636, 419.9095454545455, 482.36954545454546, 508.2390909090909, 492.0081818181818, 463.3190909090909, 447.09409090909094, 471.39863636363634, 517.4022727272727, 568.9754545454546, 625.315, 3714.22, 1903.875909090909, 1244.325, 111.4890909090909, -253.45727272727274, -351.11545454545455, -676.4436363636364, -705.9677272727273, -664.5863636363637, -739.4454545454546, -777.9418181818182, -775.5359090909091, -794.765, -840.0436363636363, -851.305, -831.6495454545454, -822.5077272727273, -775.5786363636364, -740.5295454545454, -713.4031818181818, -659.5018181818182, -572.1404545454545, -441.76954545454544, -297.5081818181818, -58.41772727272727, 228.49136363636364, 527.0613636363636, 840.8422727272728, 1088.5213636363637, 1246.9986363636363, 1345.905909090909, 1420.564090909091, 1445.4136363636364, 1387.4640909090908, 1250.0436363636363, 1034.2418181818182, 790.7140909090909, 541.6113636363636, 380.3727272727273, 254.48227272727271, 230.27227272727274, 196.69227272727272, 167.86227272727274, 165.5559090909091, 127.38181818181818, 90.45363636363636, 48.662727272727274, -17.420909090909092, -68.7909090909091, -107.80863636363637])
        self.scaler.scale_ = np.array([1096.3923549623253, 1221.7998963450955, 769.8282312539188, 517.90150395591, 421.35182662179204, 369.0713934380979, 347.52495516553904, 356.41832880371254, 354.4933668917489, 362.63483950971937, 350.5846867896023, 350.06236960110925, 349.36090019863894, 345.4311502768851, 343.941827783372, 342.14298871443566, 333.8658440966052, 329.7703153320101, 332.7216552900736, 332.86405567860567, 338.20946835614143, 340.96631514753625, 333.64058058983517, 336.1956179376144, 338.5009299567897, 330.6881974404976, 331.6864849955736, 322.87478463564275, 316.35781796504307, 316.47955435084197, 315.2366377841359, 321.1021426529607, 342.70309556361525, 364.61931199647864, 369.63553620592097, 353.63108992766723, 335.24045736506605, 322.3711588249618, 316.93070633495813, 321.8345503592777, 311.1446025839894, 304.32836931960077, 300.14813960590226, 295.83688730042445, 297.05669523003957, 297.50542719926386, 296.15284748339104, 296.43728304087, 297.6371204240813, 294.8925209432494, 756.0412338550392, 504.9493963550594, 549.7805678299569, 337.0461592069505, 245.08737011497766, 190.31714655416795, 172.01508390458798, 154.0369539749345, 146.55742339954122, 141.45064307540747, 139.28534419174028, 139.55401969494295, 132.46551348408877, 129.38735443147792, 130.31123617140878, 138.98230710795357, 145.24095267480266, 146.19511824319054, 154.87348852243048, 177.09350958924597, 175.44095750257844, 181.74067515269843, 189.53261575005467, 194.28586641236495, 189.2961168654299, 201.76697958134812, 213.22512549257027, 209.09432337083925, 193.44062841046264, 175.56294223661462, 171.33642590572714, 167.62352874105503, 155.8063058425082, 154.09529150110302, 161.0436895985188, 178.88940592000785, 198.97721066194967, 185.1172259465576, 179.59690236197417, 175.70063330447908, 160.93218555375236, 150.30489434908367, 137.4732201412031, 138.66724505832696, 129.43053457660264, 124.5108012432644, 124.63046085004345, 120.50753654203434, 120.21992449102648, 120.61101357187228, 1715.255918090775, 936.4619556638619, 954.4882045736596, 680.2396614678422, 426.22510420110126, 342.68041365669774, 297.7683000128825, 267.1550213154332, 227.6368843644205, 228.27147622842438, 238.478601787534, 208.76051204095896, 166.56898051384434, 151.9974504400954, 142.98102606596467, 152.62608000172898, 161.20784388151088, 158.60546481835976, 195.24234468172676, 209.0895495800664, 211.90444819560207, 225.1114439152563, 234.46041960942958, 240.71815242267263, 245.89099627554515, 229.00609695590052, 241.8067581849722, 257.10635280700296, 251.22230410896645, 190.4697798848421, 181.28651092792717, 215.18349769095295, 232.6058671811772, 264.72912835536897, 322.48616979730633, 384.9420080223628, 414.1485910765626, 398.48842069694473, 375.0769271374441, 309.89619551826394, 254.13115867745148, 227.4441262765121, 176.35087074172247, 149.3122335165003, 144.79696128266713, 130.57234796344127, 151.47152922276396, 149.05500372525967, 135.7473674188822, 127.08831223449187, 7400.842378592411, 7518.798478308715, 6191.632631784736, 4907.971783985389, 4411.885185333508, 3798.0835091926874, 3555.567124625434, 3241.6302444592916, 2797.844045897677, 2683.0140866471233, 2525.1633283843953, 2318.1848333841353, 2226.5967047643703, 2218.710635165125, 2174.0027421840987, 2236.5546590515987, 2389.931602395545, 2546.439492743042, 2745.059288080622, 3095.1271727158705, 3395.3985639955818, 3683.4795711152155, 3747.794643878022, 3584.571113155465, 3523.0392866682705, 3237.008440891035, 3271.2198634768947, 3190.7954055200084, 2967.6868125607702, 2777.4811715050882, 2619.217277793135, 2461.4299958686142, 2542.2997622384532, 2576.69666643322, 2774.800579726778, 2860.127057269845, 2989.079901486451, 2909.1338661171785, 2633.701130659002, 2267.143838716359, 1931.5315547593827, 1873.7425370850262, 1647.7486007592065, 1388.289456706147, 1432.5984169878861, 1228.5405796235707, 1226.6063875736033, 1088.3521158966203, 1108.1577186311406, 1116.3382271034882, 12494.308770318088, 12544.825048033155, 9487.49339543136, 6860.742943074403, 5814.574275090588, 5642.928519201385, 5331.465111772997, 4913.913874712197, 4526.748515669372, 4045.86929247454, 3588.058052819912, 3385.307662114243, 3470.9249748762672, 3640.41175053199, 3847.1845018011504, 4027.824938067159, 4178.857200174621, 4349.975345555568, 4579.120573675979, 4789.192569719906, 5002.700436598928, 5096.947495547062, 4997.50566422889, 4727.7616387814105, 4269.787576268016, 3953.526938446726, 3816.5652944983703, 3904.0946863400877, 4244.60055233401, 4729.1614881004225, 5273.071384032177, 5756.9927990557135, 6158.950551308687, 6271.846244504942, 6008.566485362078, 5452.726153259981, 4895.163144851139, 4354.593285040762, 3870.916155377538, 3413.527036583539, 3062.6621102177487, 2712.4508106607846, 2500.41194917214, 2378.885707814088, 2263.6558510112263, 2039.593211171283, 1794.6597625627464, 1661.5509877806428, 1666.1500850046982, 1658.1041570947846, 6446.529148221755, 6169.9132072547045, 4010.978648014673, 2925.5117511718563, 2712.5793546820187, 2591.3662232563497, 2368.448156015291, 2164.2955195112904, 2084.3602855106524, 1929.999048216269, 1839.5056401792413, 1829.2777219889501, 1861.1896908240017, 1869.0125277817058, 1861.5166444137838, 1847.306889993639, 1800.6322462690493, 1882.6621005176198, 2059.019217103082, 2222.219671591461, 2454.2979560903805, 2615.580209715301, 2607.4686972896247, 2406.788987413115, 2211.7949614313306, 2028.5144761439137, 2009.7249611368034, 2029.5992074420449, 2143.48331704557, 2308.3925210764687, 2508.0987920519337, 2690.7730196293214, 2751.8323030954302, 2709.7675879175913, 2523.0680713451475, 2288.268139817926, 2025.688204622544, 1776.0295542580752, 1510.0829399803968, 1274.232970226801, 1121.5392936634898, 991.6111583654321, 947.7131794887393, 930.9804033488721, 932.6880076796426, 887.8703727231268, 770.3550266962626, 702.6675258800892, 695.3357402978338, 654.9631309664792])

        print(f"Leg Scaler time: {((time.time() - scaler_time) * 1000):.4f} ms\n")

        # Load the overlay
        overlay = Overlay("/home/xilinx/IP/design_both.bit")

        # DMA objects
        self.dma = overlay.axi_dma_0
        self.dma_send = self.dma.sendchannel
        self.dma_recv = self.dma.recvchannel

        # HLS object
        self.hls = overlay.predict_0
        CONTROL_REGISTER = 0x0
        self.hls.write(CONTROL_REGISTER, 0x81)  # Starts the HLS IP

    def predict(self, input, player_id):
      input_buffer = allocate(shape=(301,), dtype=np.float32)
      output_buffer = allocate(shape=(3,), dtype=np.float32)
      padded_input = np.pad(input, (0, 300 - len(input)), 'constant')
      
      # Use the stored scaler to transform the input
      scaled_input = self.scaler.transform([padded_input])
      input_buffer[0] = 1.0 #device = leg
      for i in range(300):
         input_buffer[i + 1] = scaled_input[0][i]
      
      #start_time = time.time()
      self.dma_send.transfer(input_buffer)
      self.dma_recv.transfer(output_buffer)
      self.dma_send.wait()
      self.dma_recv.wait()
   
      # Output the result from DMA
      #logger.info(f"[P{player_id}] Float values:{output_buffer}")
      max_idx = 0
      max_val = output_buffer[0]
      for i in range(1, 3):
         if output_buffer[i] > max_val:
            max_val = output_buffer[i]  
            max_idx = i

      #print("Input Buffer (Sent Data):", scaled_input)
      #print(f"Predicted Gesture: {max_idx}")
      #print(f"Inference time: {((time.time() - start_time) * 1000):.4f} ms\n")

      # Apply softmax to calculate confidence
      probabilities = softmax(output_buffer)
      max_idx = np.argmax(probabilities)
      confidence = probabilities[max_idx]
      
      gesture_mapping = ['soccer', 'invalid', "invalid"]
      predicted_gesture = gesture_mapping[max_idx]
      logger.info(f"[P{player_id}] Predicted Leg Gesture : {predicted_gesture} with confidence: {confidence:.2f}")

      if confidence < 0.9:
         predicted_gesture = 'invalid'

      # Clean up
      input_buffer.close()
      output_buffer.close()

      return predicted_gesture

